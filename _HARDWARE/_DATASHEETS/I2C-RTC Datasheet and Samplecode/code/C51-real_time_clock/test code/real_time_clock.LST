C51 COMPILER V7.06   REAL_TIME_CLOCK                                                       07/30/2012 13:36:04 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE REAL_TIME_CLOCK
OBJECT MODULE PLACED IN real_time_clock.OBJ
COMPILER INVOKED BY: E:\Keil\C51\BIN\C51.EXE real_time_clock.c BROWSE DEBUG OBJECTEXTEND

stmt level    source

   1          //This procedure is used to display the current time, and can modify the initial time.
   2          //AT89C51 The crystal frequency is 12MHz
   3          //Function: DS1307 display: seconds, minutes, weeks, days, date, month, year. Can show :2000-2909.Automati
             -c leap year adjustment.
   4          //Note: DS1307 to read and write are BCD, the exchange between the decimal and BCD.
   5          //Time: July 27, 2012
   6          /********************************************************************************************/
   7          #include "reg51.h"//
   8          #include "intrins.h"//
   9          #define uchar unsigned char//
  10          #define uint unsigned int//
  11          
  12          sbit sda=P1^1;//;Simulate the I2C data transmit bit
  13          sbit scl=P1^0;//;Simulate the I2C clock control state flag
  14          
  15          sbit RS=P2^0;//LCD1602 define the I / O hardware interface
  16          sbit RW=P2^1;
  17          sbit E=P2^2; //
  18          
  19          uchar count;
  20          uchar string3[]="Time:  :  :     ";
  21          uchar string4[]="20  .  .  week: ";
  22          uchar Hours=13;//Definition of hours
  23          uchar Minutes=34;//Definition of minutes
  24          uchar Seconds=30;//Definition of seconds
  25          
  26          uint  Year=12;//Definition of year
  27          uchar Month=7;//Definition of month
  28          uchar Date=30;//Definition of date
  29          uchar Weeks=1;//Definition of weeks 
  30          
  31          uchar DispBuf[16]; //16 bytes of display buffer
  32          uchar disp_tab[]={'0','1','2','3','4','5','6','7','8','9'};
  33          
  34          void delay_2(uint z)//1ms delay
  35          { 
  36   1              uchar x,x1;
  37   1              for(x1=0;x1<z;x1++)
  38   1              {
  39   2                      for(x=0;x<114;x++);
  40   2              }
  41   1      }
  42          
  43          void delay()//5us delay
  44          {
  45   1              _nop_();
  46   1              _nop_();
  47   1              _nop_();
  48   1              _nop_();
  49   1      }
  50          void delay_1()//1ms delay
  51          { 
  52   1              uchar x,x1;
  53   1              for(x1=0;x1<2;x1++)
  54   1              {
C51 COMPILER V7.06   REAL_TIME_CLOCK                                                       07/30/2012 13:36:04 PAGE 2   

  55   2                      for(x=0;x<114;x++);
  56   2              }
  57   1      }
  58          
  59          void star()//I2C star
  60          {
  61   1              sda=1;
  62   1              delay();//5us delay
  63   1              scl=1;
  64   1              delay();//5us delay
  65   1              sda=0;
  66   1              delay();//5us delay
  67   1      
  68   1      }
  69          
  70          void stop()//I2C stop
  71          {
  72   1              sda=0;
  73   1              delay();//5us
  74   1              scl=1;
  75   1              delay();//5us
  76   1              sda=1;
  77   1              delay();//5us
  78   1      }
  79          void ack()//
  80          { 
  81   1              uchar z=0;
  82   1              while((sda==1)&&(z<50))z++;//Conditional, sda = 1, there is no answer. If no answer is delay: z <50, z + 
             -+; return to
  83   1              scl=0;
  84   1              delay();//5us
  85   1      }
  86          /////////////////////////////////////////////////////////////////////////////////////////
  87          void write(uchar slave_write_address,uchar byte_address,uchar data_data)//Write a data
  88          {
  89   1              uchar temp,temp1,i,ii;
  90   1              
  91   1              star();//
  92   1              
  93   1              for(ii=0;ii<3;ii++)//In order to send: the device write address, the byte address, data
  94   1              { 
  95   2                      if(ii==0)
  96   2                      {
  97   3                              temp=slave_write_address;//he device write address
  98   3                              temp1=slave_write_address;
  99   3                      }
 100   2                      else if(ii==1)
 101   2                      {
 102   3                              temp=byte_address;//the byte address
 103   3                              temp1=byte_address;
 104   3                      }
 105   2                      else if(ii==2)
 106   2                      {
 107   3                              temp=data_data;//data
 108   3                              temp1=data_data;
 109   3                      }
 110   2              
 111   2                      for(i=0;i<8;i++)
 112   2                      {
 113   3                              scl=0;
 114   3                              delay();//5us
 115   3                              temp=temp1;
C51 COMPILER V7.06   REAL_TIME_CLOCK                                                       07/30/2012 13:36:04 PAGE 3   

 116   3                              temp=temp&0x80;// Take the highest bit
 117   3                              
 118   3                              if(temp==0x80)//                        
 119   3                              sda=1; 
 120   3                              else
 121   3                              sda=0;
 122   3                              
 123   3                              delay();//5us
 124   3                              scl=1;
 125   3                              delay();//5us
 126   3                              scl=0;
 127   3                              delay();//5us
 128   3                              temp1=temp1<<1;//Prepare the next bit
 129   3              
 130   3                      }
 131   2                      sda=1;
 132   2                      delay();//5us
 133   2                      scl=1;
 134   2                      delay();//5us
 135   2                      ack();
 136   2              }
 137   1              stop();//
 138   1      }
 139          
 140          uchar read(uchar slave_write_address,uchar byte_address,uchar slave_read_address)//Read a data
 141          {
 142   1              uchar temp,temp1,i,ii,x,data_data;
 143   1              
 144   1              star();//
 145   1              
 146   1              for(ii=0;ii<3;ii++)//In order to send: the device write address, the byte address, data
 147   1              { 
 148   2                      if(ii==0)
 149   2                      {
 150   3                              temp=slave_write_address;//
 151   3                              temp1=slave_write_address;
 152   3                      }
 153   2                      else if(ii==1)
 154   2                      {
 155   3                              temp=byte_address;//
 156   3                              temp1=byte_address;
 157   3                      }
 158   2                      else if(ii==2)
 159   2                      { 
 160   3                              star();//               
 161   3                              temp=slave_read_address;//
 162   3                              temp1=slave_read_address;
 163   3                      }
 164   2              
 165   2              
 166   2                      for(i=0;i<8;i++)//Began to read data
 167   2                      {
 168   3                              scl=0;
 169   3                              delay();//5us
 170   3                              temp=temp1;
 171   3                              temp=temp&0x80;// 
 172   3                              
 173   3                              if(temp==0x80)//                
 174   3                              sda=1; 
 175   3                              else
 176   3                              sda=0;
 177   3                              
C51 COMPILER V7.06   REAL_TIME_CLOCK                                                       07/30/2012 13:36:04 PAGE 4   

 178   3                              delay();//5us
 179   3                              scl=1;
 180   3                              delay();//5us
 181   3                              scl=0;
 182   3                              delay();//5us
 183   3                              temp1=temp1<<1;//
 184   3                      }
 185   2                      sda=1;
 186   2                      delay();//5us
 187   2                      scl=1;
 188   2                      delay();//5us
 189   2                      ack();//
 190   2              }
 191   1              
 192   1              for(x=0;x<8;x++)
 193   1              {
 194   2                      data_data=data_data<<1;//
 195   2                      
 196   2                      sda=1;
 197   2                      delay();//5us
 198   2                      scl=0;
 199   2                      delay();//5us
 200   2                      scl=1;
 201   2                      delay();//5us
 202   2                      
 203   2                      if(sda==1)//
 204   2                      data_data|=0x01;//
 205   2                      //else 
 206   2                      //data_data|=0x00;
 207   2              }
 208   1              ack();//
 209   1              stop();//
 210   1              return data_data;//
 211   1      
 212   1      }
 213          /////////////////////////////////////////////////////////////////////////////////////////
 214          void write_Directive(uchar command)//LCD1602 write command
 215          {
 216   1              E=0;
 217   1              RS=0;
 218   1              RW=0;   
 219   1              P0=command;
 220   1              _nop_();        
 221   1              E=1;    
 222   1              delay_1();
 223   1              E=0;
 224   1      }
 225          void write_Data(uchar dat)//LCD1602 read data
 226          {
 227   1              E=0;
 228   1              RS=1;
 229   1              RW=0;
 230   1              P0=dat;
 231   1              _nop_();
 232   1              E=1;
 233   1              delay_1();
 234   1              E=0;
 235   1      }
 236          void lcdinit(void)//LCD1602 Initialization
 237          {
 238   1              delay_2(90);
 239   1              write_Directive(0x38);
C51 COMPILER V7.06   REAL_TIME_CLOCK                                                       07/30/2012 13:36:04 PAGE 5   

 240   1              delay_2(30);
 241   1              write_Directive(0x38);
 242   1              delay_2(30);
 243   1              write_Directive(0x38);
 244   1              write_Directive(0x38);
 245   1              write_Directive(0x08);
 246   1              write_Directive(0x01);
 247   1              write_Directive(0x06);
 248   1              write_Directive(0x0c);          
 249   1      }
 250          /////////////////////////////////////////////////////////////////////////////////////////
 251          
 252          void init()//ds1307 Initialization
 253          {
 254   1              sda=1;
 255   1              scl=1;
 256   1      }
 257          void Show()//show
 258          { 
 259   1              write_Directive(0x80+5);//the first row of LCD1602 , The fifth address
 260   1              DispBuf[0]=disp_tab[(Hours/10)];//
 261   1              DispBuf[1]=disp_tab[(Hours%10)];//      
 262   1              write_Data(DispBuf[0]);//Ten of the Hours
 263   1              write_Data(DispBuf[1]);// Bits of the Hours
 264   1      
 265   1              write_Directive(0x80+8);
 266   1              DispBuf[2]=disp_tab[(Minutes/10)];//
 267   1              DispBuf[3]=disp_tab[(Minutes%10)];//    
 268   1              write_Data(DispBuf[2]);//Ten of the Minutes
 269   1              write_Data(DispBuf[3]);//Bits of the Minutes
 270   1      
 271   1              write_Directive(0x80+11);
 272   1              DispBuf[4]=disp_tab[(Seconds/10)];//
 273   1              DispBuf[5]=disp_tab[(Seconds%10)];//    
 274   1              write_Data(DispBuf[4]);//Ten of the Seconds
 275   1              write_Data(DispBuf[5]);//Bits of the Seconds
 276   1              
 277   1              write_Directive(0x80+0x40+2);//the second line of LCD1602, The second addresses
 278   1              DispBuf[7]=disp_tab[(Year/10)];//
 279   1              DispBuf[8]=disp_tab[(Year%10)];//
 280   1              write_Data(DispBuf[7]);//Ten of the Year
 281   1              write_Data(DispBuf[8]);//Bits of the Year
 282   1              
 283   1              write_Directive(0x80+0x40+5);//
 284   1              DispBuf[9]=disp_tab[(Month/10)];//
 285   1              DispBuf[10]=disp_tab[(Month%10)];//
 286   1              write_Data(DispBuf[9]);//Ten of the clock
 287   1              write_Data(DispBuf[10]);//Bits of the clock
 288   1      
 289   1              write_Directive(0x80+0x40+8);//
 290   1              DispBuf[11]=disp_tab[(Date/10)];//
 291   1              DispBuf[12]=disp_tab[(Date%10)];//
 292   1              write_Data(DispBuf[11]);//Ten of the Date
 293   1              write_Data(DispBuf[12]);//Bits of the Date
 294   1      
 295   1              write_Directive(0x80+0x40+15);//
 296   1              DispBuf[14]=disp_tab[Weeks];//
 297   1              write_Data(DispBuf[14]);//week
 298   1      }
 299          
 300          uchar Decimal_to_BCD(uchar temp)//decimal to BCD
 301          {
C51 COMPILER V7.06   REAL_TIME_CLOCK                                                       07/30/2012 13:36:04 PAGE 6   

 302   1              uchar a,b,c;
 303   1              a=temp;
 304   1              b=0;
 305   1              if(a>=10)
 306   1              {
 307   2                      while(a>=10)
 308   2                      {
 309   3                              a=a-10;
 310   3                              b=b+16;
 311   3                              c=a+b;
 312   3                              temp=c;
 313   3                      }
 314   2              }
 315   1              return temp;
 316   1      }
 317          
 318          uchar BCD_to_Decimal(uchar temp)//BCD to decimal
 319          {
 320   1              uchar a,b,c;
 321   1              a=temp;
 322   1              b=0;
 323   1              if(a>=16)
 324   1              {
 325   2                      while(a>=16)
 326   2                      {
 327   3                              a=a-16;
 328   3                              b=b+10;
 329   3                              c=a+b;
 330   3                              temp=c;
 331   3                      }
 332   2              }
 333   1              return temp;
 334   1      }
 335          
 336          void write_ds1307()
 337          {
 338   1              //Write a data to the device: (0xd0 is device write address; 0x01 ~ 06 are seconds to years register; Sec
             -onds ~ Year, data to be written)//
 339   1              Seconds=Decimal_to_BCD(Seconds);//Decimal converted to BCD code
 340   1              Minutes=Decimal_to_BCD(Minutes);//
 341   1              Hours=Decimal_to_BCD(Hours);//
 342   1              
 343   1              Date=Decimal_to_BCD(Date);//
 344   1              Year=Decimal_to_BCD(Year);//
 345   1              Month=Decimal_to_BCD(Month);//
 346   1              
 347   1              write(0xd0,0x00,Seconds);//write seconds
 348   1              write(0xd0,0x01,Minutes);//write minutes
 349   1              write(0xd0,0x02,Hours);//hours
 350   1              
 351   1              write(0xd0,0x03,Weeks);//
 352   1              write(0xd0,0x04,Date);//
 353   1              write(0xd0,0x05,Month);//
 354   1              write(0xd0,0x06,Year);//
 355   1      }
 356          void read_ds13074()
 357          {
 358   1              //Read a data to the device: (0xd0 is the DS1307 device write address; 0x01 ~ 06 are seconds to years reg
             -ister; 0xd1 is DS1307 device read address)    
 359   1              Seconds=read(0xd0,0x00,0xd1);//read second
 360   1              Seconds=BCD_to_Decimal(Seconds);//CD code converted to decimal
 361   1              
C51 COMPILER V7.06   REAL_TIME_CLOCK                                                       07/30/2012 13:36:04 PAGE 7   

 362   1              Minutes=read(0xd0,0x01,0xd1);
 363   1              Minutes=BCD_to_Decimal(Minutes);//
 364   1              
 365   1              Hours=read(0xd0,0x02,0xd1);
 366   1              Hours=BCD_to_Decimal(Hours);//
 367   1              
 368   1              Weeks=read(0xd0,0x03,0xd1);//
 369   1              
 370   1              Date=read(0xd0,0x04,0xd1);
 371   1              Date=BCD_to_Decimal(Date);//
 372   1              
 373   1              Month=read(0xd0,0x05,0xd1);
 374   1              Month=BCD_to_Decimal(Month);//
 375   1              
 376   1              Year=read(0xd0,0x06,0xd1);
 377   1              Year=BCD_to_Decimal(Year);//
 378   1      }
 379          void main()
 380          {
 381   1      
 382   1              init();
 383   1              lcdinit();
 384   1              write_Directive(0x80);
 385   1              for(count=0;count<16;count++) write_Data(string3[count]);
 386   1              write_Directive(0x80+0x40);
 387   1              for(count=0;count<16;count++) write_Data(string4[count]);
 388   1              //write_ds1307();//Write the initial value on ds1307//(Modification time initial value when used)
 389   1              while(1)
 390   1              { 
 391   2      
 392   2                      read_ds13074();
 393   2                      Show();
 394   2              }
 395   1      }
 396          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    965    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     69       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
